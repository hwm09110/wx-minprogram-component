<template>
  <view class='fullscreen'>
    <view  wx:if="{{beCalling}}" class='becalling-wrapper'>
      <view class='becalling-text'>对方邀请你开始视频聊天</view>
      <view class='becalling-button-group'>
        <view class='reject-button button' catchtap='rejectCallHandler'>拒绝</view>
        <view class='accept-button button' catchtap='acceptCallHandler'>接听</view>
      </view>
    </view>
    <view wx:else class='fullscreen'>
      <view wx:if="{{isCalling}}" class="fullscreen">
        <camera mode="normal" device-position="front" class="fullscreen" flash="off" binderror="cameraOpenErrorHandler" class='fullscreen' style="width:{{callingPosition.width}}px; height: {{callingPosition.height}}px;">
          <cover-view class='calling-coverview'>
            正在呼叫请稍后
          </cover-view>
        </camera>
      </view>
      <view wx:else class='fullscreen'>
        <view class='video-wrapper'>
          <block wx:for="{{userlist}}" wx:for-item="user" wx:for-index="index" wx:key="uid">
            <yunxin-pusher
              wx:if="{{user.uid === loginUser.uid}}"
              wx:key="{{user.uid}}"
              id="yunxin-pusher"
              url="{{user.url}}"
              enable-camera="{{enableCamera}}"
              muted="{{muted}}"
              beauty="true"
              config="{{selfPosition}}"
              bindpushfailed="onPusherFailed"
            >
            </yunxin-pusher>
            <yunxin-player
              wx:if="{{user.uid !== loginUser.uid}}"
              wx:key="{{user.uid}}"
              id="yunxinplayer-{{user.uid}}"
              uid="{{user.uid}}"
              url="{{user.url}}"
              config="{{otherPosition}}"
              bindpullfailed="onPullFailed"
              >
              <cover-view class='control-wrapper'>
                <cover-view class='netcall-time-text'>{{duration}}</cover-view>
                <cover-image class="item" src="{{callTypeIconKind == 'video' ? img.callVoice : img.callVoice}}" catchtap="switchToVoiceCallHandler">语音通话</cover-image>
                <cover-image class="item" src="../../assets/img/netcall-revert-camera.png" wx:if="{{callTypeIconKind == 'video'}}" catchtap="switchCameraHandler">切摄像头</cover-image>
                <cover-image class="item" src="{{enableCamera ? img.camera : img.cameraClose}}" wx:if="{{callTypeIconKind == 'video'}}" data-mode="1" catchtap="switchMeetingModeHandler">关闭摄像头</cover-image>
                <cover-image class="item" src="{{muted ? img.microClose : img.micro}}" data-mode="2" catchtap="switchMeetingModeHandler">关闭麦克风</cover-image>
                <cover-image class="item" src="../../assets/img/netcall-reject.png" catchtap="hangupHandler">挂断</cover-image>
              </cover-view>
            </yunxin-player>
          </block>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  const app = getApp()

  createPage({
    data: {
      img: {
        callVideo: require('../../assets/img/netcall-call-video.png'),
        callVoice: require('../../assets/img/netcall-call-voice.png'),
        camera: require('../../assets/img/netcall-camera.png'),
        cameraClose: require('../../assets/img/netcall-camera-close.png'),
        micro: require('../../assets/img/netcall-micro.png'),
        microClose: require('../../assets/img/netcall-micro-close.png')
      },
      onTheCall: false, //正在通话中标记
      isCalling: false,// 主叫中
      beCalling: false, // 被叫中
      callingPosition: {}, // 呼叫中的位置
      enableCamera: true, // 开启摄像头标记
      muted: false, // 静音标记
      userlist: [], // 所有用户列表
      loginUser: {}, // {uid,account,cid}
      infoOfBeCalled: {}, // 被叫时传递过来的：主叫信息 {caller,cid,type}
      netcallTime: 0, // 通话时长
      duration: '', // 格式化后的时间
      selfPosition: {}, // 自己的位置
      otherPosition: {}, // 对端的位置大小
      callTypeIconKind: 'video', // 当前的通话类型，音频通话为audio，视频通话为video
      // 音视频流重连标记
      streamNeedReconnect: false,
      streamStoped: false
    },
    watch: {
      userlist(newVal, oldVal) {
        console.log('old userlist', oldVal);
        console.log('new userlist', newVal);
      }
    },
    methods: {
      _initialPosition() {
        let containerSize = app.globalData.videoContainerSize // 外部容器大小
        let selfPosition = {
          x: containerSize.width - 100 - 30,
          y: 30,
          width: 100,
          height: 150
        }
        let otherPosition = {
          x: 0,
          y: 0,
          width: containerSize.width,
          height: containerSize.height
        }
        this.setData({
          selfPosition,
          otherPosition
        })
      },
      _unBindNetcallEvent() {
        app.globalData.emitter.eventReset()
      },
      _mergeUserList(oldList, newList) {
        console.log('老的数据')
        console.log(oldList)
        console.log('新的数据')
        console.log(newList)
        let resultList = Object.assign([], oldList)
        resultList.map(user => {
          newList.map(newUser => {
            if (newUser.uid == user.uid || newUser.account == user.account) {
              Object.assign(user, newUser)
            }
          })
        })
        console.log('处理后的数据')
        console.log(resultList)
        return resultList
      },
      listenNetcallEvent() {
        let self = this
        app.globalData.emitter.on('syncDone', (data) => {
          console.log('listenNetcallEvent 同步完成')
          console.log(data)
          // self._mergeUserList(this.userlist, data.userlist)
          let userlist = Object.assign([], data.userlist)
          if (userlist.length == 1) {
            userlist.push({})
            userlist.reverse()
          }
          console.error(userlist)
          if (this.userlist.length == 2) {
            this.setData({
              streamNeedReconnect: true,
              userlist: []
            })
            console.error('再次重连媒体流了')
            setTimeout(() => {
              self.setData({
                onTheCall: true, // 正在通话中标记
                userlist: userlist,
              })
            }, 70)
            this.showToast('text', '媒体流重新建立中，请稍后')
            self.reconnectStreamAfter(100)
            return
          }
          self.setData({
            onTheCall: true, // 正在通话中标记
            userlist: userlist,
            streamNeedReconnect: true
          })
          self.reconnectStreamAfter()
          // 设置通话定时计时器
          self._clearCallTimer()
          if (!self.netcallTimeTimer) {
            self.netcallTimeTimer = setInterval(() => {
              let { hour, minute, second } = self._formateDuration(self.netcallTime + 1)
              self.setData({
                netcallTime: self.netcallTime + 1,
                duration: `${hour}:${minute}:${second}`
              })
            }, 1000)
          }
        })
        app.globalData.emitter.on('callAccepted', (data) => {
          console.log('对方接听了', data)
          clearTimeout(this.hangupTimer)
          // 开启音视频逻辑
          app.globalData.netcall.startRtc({ mode: 0 })
            .then((data) => {
              console.log(`开启音视频成功`)
              console.log(data)
              self.livePusherContext = wx.createLivePusherContext()
              self.setData({
                loginUser: data,
                isCalling: false,
                streamNeedReconnect: true
              })
            })
        })
        app.globalData.emitter.on('callRejected', (data) => {
          console.log('对方拒绝了')
          console.log(data)
          clearTimeout(this.hangupTimer)
          this.setData({
            onTheCall: false
          })
          const duration = 2000
          this.showToast('text', `对方拒绝，${duration}ms后返回`, { duration })
          this.hangupHandlerAfter(duration)
        })
        app.globalData.emitter.on('clientLeave', (data) => {
          console.log('有人离开了：')
          console.log(self.userlist)
          console.log(data)
        })
        app.globalData.emitter.on('clientJoin', (data) => {
          console.log('有人加入了')
          self._personJoin(data)
          console.log(self.userlist)
        })
        app.globalData.emitter.on('beCalling', (data) => {
          console.log('被叫了')
          console.log(data)
          if (this.onTheCall || this.isCalling || this.infoOfBeCalled.cid != data.cid) {
            // 如果通话中，则拒绝
            app.globalData.netcall.response({
              accepted: false,
              caller: data.caller,
              type: data.type,
              cid: data.cid
            })
            return
          }
          this.setData({
            infoOfBeCalled: data
          })
        })
        app.globalData.emitter.on('hangup', (data) => {
          console.log('对端挂断了')
          console.log(data)
          console.log(this.loginUser)
          // 接通过程
          if (data.cid != this.loginUser.cid && this.onTheCall) {
            console.warn('接通过程,非本通通话，抛弃')
            return
          }
          // 被叫过程
          if (this.beCalling && this.infoOfBeCalled.cid != data.cid) {
            console.warn('被叫过程,非本通通话，抛弃')
            return
          }
          // 主叫过程
          if (this.isCalling && data.account != this.pageTitle) {
            console.warn('主叫过程,非本通通话，抛弃')
            return
          }
          this._clearCallTimer()

          const duration = 2000
          this.showToast({title: `对方已经挂断`, duration: 2000})
          this.hangupHandlerAfter(0)
        })
        app.globalData.emitter.on('control', (data) => {
          console.log('control')
          console.log(data)
          this.controlHandler(data)
        })
        // 信令准备重连
        app.globalData.emitter.on('willreconnect', () => {
          this.stopStream()
        })
      },
      // 校验是否需要返回上一层，
      _judgeNavigateBack(delayTime = 0) {
        let pages = getCurrentPages()
        let currentPage = pages[pages.length - 1]
        if (currentPage.route.includes('videocall') === true) {
          setTimeout(() => {
            wx.navigateBack(1)
          }, delayTime)
        }
      },
      _personJoin(data) {
        let userlist = Object.assign([], this.userlist)
        if (userlist.length == 0) {
          userlist.push(data)
          this.setData({
            userlist: userlist
          })
          return
        }
        let uids = userlist.map(user => user.uid) || []
        if (uids.includes(data.uid) === false) {
          // 非自己
          if (this.loginUser.uid !== data.uid) {
            Object.assign(userlist[0], data)
          }
          console.error(userlist)
          this.setData({
            userlist: userlist
          })
        }
      },
      /**
       * 返回指定uid组件的拉流操作上下文
       */
      _getPlayerComponent(uid) {
        const yunxinPlayer = this.selectComponent(`#yunxinplayer-${uid}`)
        return yunxinPlayer
      },
      /**
       * 返回推流组件的操作上下文
       */
      _getPusherComponent() {
        const yunxinPusher = this.selectComponent(`#yunxin-pusher`)
        return yunxinPusher
      },
      controlHandler(_data) {
        let self = this
        switch (_data.command) {
          // 主动请求从音频切换到视频
          case app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO:
            console.log('请求从音频切换到视频')
            wx.showModal({
              title: '切换通话模式',
              content: '对方请求从音频切换到音视频',
              confirmText: '允许',
              cancelText: '拒绝',
              success: function (res) {
                let { confirm, cancel } = res
                if (confirm) { // 单击了允许
                  self.agreeSwitchAudioToVideo()
                }
                if (cancel) { // 单击了取消
                  self.rejectSwitchAudioToVideo()
                }
              }
            })
            break
          // 对方同意从音频切换到视频
          case app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO_AGREE:
            console.log('对方同意从音频切换到视频')
            // 切换音频到视频
            this.switchToVideoCall()
            break
          // 对方拒绝从音频切换到视频
          case app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO_REJECT:
            this.showToast('text', '对方拒绝音频切换到音视频')
            break
          // 从视频切换到音频
          case app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_VIDEO_TO_AUDIO:
            console.log('从视频切换到音频')
            // 切换视频到音频
            self.switchToVoiceCall()
            break
        }
      },
      // 拒绝 音频 -> 视频
      rejectSwitchAudioToVideo() {
        this.showToast('text', '拒绝切换到视频模式')
        app.globalData.netcall.control({
          command: app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO_REJECT
        })
      },
      // 同意 音频 -> 视频
      agreeSwitchAudioToVideo() {
        this.showToast('text', '切换到视频模式')
        // 发送指令
        app.globalData.netcall.control({
          command: app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO_AGREE
        })
        this.switchToVideoCall()
      },
      /**
       * 切换至音频通话单击事件
       */
      switchToVoiceCallHandler() {
        if (this.callTypeIconKind === 'video') {
          // 当前是视频，准备切换至音频
          app.globalData.netcall.control({
            cid: this.loginUser.cid,
            command: app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_VIDEO_TO_AUDIO
          })
          this.switchToVoiceCall()
        } else {
          // 当前是音频准备切换至音视频
          app.globalData.netcall.control({
            cid: this.loginUser.cid,
            command: app.globalData.netcall.NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO
          })
        }
      },
      switchToVoiceCall() {
        const self = this
        // 切换本地状态
        this.setData({
          enableCamera: false,
          mute: this.mute,
          // muted: false, // 主动关闭麦克风的，麦克风还是关闭的
          callTypeIconKind: 'audio'
        })
        app.globalData.netcall.switchMode(app.globalData.netcall.NETCALL_MODE_ONLY_AUDIO)
          .then(() => {
            console.log('切换模式至 -> ', app.globalData.netcall.NETCALL_MODE_ONLY_AUDIO)
            self.stopStream(0).then(() => {
              self.reconnectStreamAfter(100)
            })
          })
          .catch((err) => {
            console.error(err)
          })
      },
      /**
       * 切换至视频通话
       */
      switchToVideoCall() {
        const self = this
        // 切换本地状态
        this.setData({
          enableCamera: true,
          mute: this.mute,
          // muted: false, // 主动关闭麦克风的，麦克风还是关闭的
          callTypeIconKind: 'video'
        })
        this.showToast('text', '切换至视频模式')
        app.globalData.netcall.switchMode(app.globalData.netcall.NETCALL_MODE_AUDIO_VIDEO)
          .then(() => {
            console.log('切换模式至 -> ', app.globalData.netcall.NETCALL_MODE_AUDIO_VIDEO)
            self.stopStream(0).then(() => {
              self.reconnectStreamAfter(100)
            })
          })
          .catch((err) => {
            console.error(err)
          })
      },
      /**
       * 切换摄像头回调
       */
      switchCameraHandler() {
        this.livePusherContext.switchCamera()
      },
      /**
       * 开关摄像头、麦克风回调
       * 0音视频，1纯音频，2纯视频，3静默
       */
      switchMeetingModeHandler(e) {
        let mode = e.currentTarget.dataset.mode
        let enableCamera = this.enableCamera
        let muted = this.muted
        if (mode == 1) { // 单击了关闭摄像头 => 纯音频
          enableCamera = !enableCamera
          if (enableCamera) { // 摄像头开启 => 关闭摄像头
            if (muted) {
              mode = 2
            } else {
              mode = 0
            }
          } else { // 摄像头关闭 => 开启摄像头
            if (muted) {
              mode = 3
            } else {
              mode = 1
            }
          }

          if (enableCamera) {
            this.showToast('text', '摄像头已打开')
          } else {
            this.showToast('text', '摄像头已关闭')
          }
        } else if (mode == 2) { // 单击了关闭麦克风 => 纯视频
          muted = !muted
          if (muted) { // 静音：false => true
            if (enableCamera) {
              mode = 2
            } else {
              mode = 3
            }
          } else { // true => false
            if (enableCamera) {
              mode = 0
            } else {
              mode = 1
            }
          }
          if (muted) {
            this.showToast('text', '麦克风已关闭')
          } else {
            this.showToast('text', '麦克风已打开')
          }
        }
        // 切换本地状态
        this.setData({
          enableCamera,
          muted
        })
        if (mode == 1) {
          this.stopStream(0).then(() => {
            this.reconnectStreamAfter(100)
          })
        }
        app.globalData.netcall.switchMode(mode)
          .then(() => {
            console.log('切换模式至 -> ', mode)
          })
          .catch((err) => {
            console.error(err)
          })
      },
      switchAudioInputHandler () {
        let muted = this.muted
        this.setData({
          muted: !muted
        })
      },
      switchVideoInputHandler () {
        let enableCamera = this.enableCamera
        this.setData({
          enableCamera: !enableCamera
        })
      },
      /**
       * 接听通话
       */
      acceptCallHandler(e) {
        let self = this
        // 显示通信画面
        console.log('接听通话', app.globalData.netcall.response);
        app.globalData.netcall.response({
          caller: this.infoOfBeCalled.caller,
          accepted: true,
          type: this.infoOfBeCalled.type,
          cid: this.infoOfBeCalled.cid
        }).then(() => {
            // 开启音视频逻辑
            console.log('接听。。。')
            app.globalData.netcall.startRtc({ mode: 0 })
              .then((data) => {
                console.log('接听。。。loginUser', data)
                self._clearCallTimer()
                self.setData({
                  beCalling: false,
                  isCalling: false,
                  loginUser: data,
                  streamNeedReconnect: true
                })
                self.livePusherContext = wx.createLivePusherContext()
              })
          }).catch((error) => {
            console.error(error)
            const duration = 2000
            this.showToast('text', `接听失败，请重试，${duration}ms后返回`, { duration })
            this.hangupHandlerAfter(0)
          })
      },
      /**
       * 拒绝通话
       */
      rejectCallHandler(e) {
        this._clearCallTimer()
        app.globalData.netcall.response({
          caller: this.infoOfBeCalled.caller,
          accepted: false,
          type: this.infoOfBeCalled.type,
          cid: this.infoOfBeCalled.cid
        }).then(() => {
          this._resetData()
          this.hangupHandlerAfter(0)
        }).catch((error) => {
          console.error(error)
        })
      },
      /**
       * 挂断通话
       */
      hangupHandler(notBack = false) {
        return Promise.resolve().then(() => {
          if (app.globalData.netcall) {
            console.log('start hangup')
            app.globalData.netcall.hangup()
          }
          return Promise.resolve()
        }).then(() => {
          // 停止推拉流
          this._resetData()
          console.log('通话被挂断。。。')
          this.stopStream(0)
          if (notBack !== true) {
            this._judgeNavigateBack(0)
          }
          this._clearCallTimer()
          this._clearNetcallTimeTimer()
          this._unBindNetcallEvent()
          // 避免频繁操作
          clearTimeout(app.globalData.videoCallTimer)
          app.globalData.videoCallTimer = setTimeout(() => {
            app.globalData.waitingUseVideoCall = false
          }, 2000)
          app.globalData.waitingUseVideoCall = true
        })
      },
      hangupHandlerAfter(duration = 0) {
        clearTimeout(this.hangupTimer)
        this.hangupTimer = setTimeout(() => {
          this.hangupHandler()
        }, duration)
      },
      /**
       * 清除呼叫定时器
       */
      _clearCallTimer() {
        if (this.callTimerId) {
          clearTimeout(this.callTimerId)
          this.callTimerId = null
        }
      },
      /**
       * 清除通话计时定时器
       */
      _clearNetcallTimeTimer() {
        if (this.netcallTimeTimer) {
          clearTimeout(this.netcallTimeTimer)
          this.netcallTimeTimer = null
        }
      },
      onPusherFailed() {
        // needRePublish = true
      },
      onPullFailed() {
        // needRePlay = true
      },
      _resetData () {
        clearTimeout(this.hangupTimer)
        clearTimeout(this.callTimerId)
        this._resetStreamState()
        this.setData({
          beCalling: false,
          isCalling: false,
          onTheCall: false, // 通话中的标记复位
          userlist: []
        })
      },
      _resetStreamState () {
        clearTimeout(this.stopStreamTimer)
        this.setData({
          streamNeedReconnect: false,
          streamStoped: false
        })
      },
      stopStream (duration = 1000) {
        if (this.stopStreamTimer) {
          clearTimeout(this.stopStreamTimer)
        }
        if (this.streamStoped) {
          return Promise.resolve()
        }
        console.log('停止推流')
        return new Promise((resolve, reject) => {
          this.stopStreamTimer = setTimeout(() => {
            if (!this.livePusherContext) {
              return
            }
            if (!this.livePlayerMap) {
              this.livePlayerMap = {}
            }
            this.userlist.map(user => {
              const uid = `${user.uid}`
              if (user.uid != this.loginUser.uid) {
                console.log(`停止拉流 ${uid}`)
                if (!this.livePlayerMap[uid]) {
                  this.livePlayerMap[uid] = wx.createLivePlayerContext(`yunxinplayer-${user.uid}`, this)
                }
                this.livePlayerMap[uid].stop()
              }
            })
            this.livePusherContext.stop({
              complete: () => {
                console.log('推流已停止')
                this.setData({
                  streamStoped: true
                })
                resolve()
              }
            })
          }, duration)
        })
      },
      reconnectStream () {
        if (this.streamNeedReconnect) {
          clearTimeout(this.stopStreamTimer)
          console.log('开始推流')
          this.livePusherContext.start({
            success: () => {
              this.setData({
                streamStoped: false
              })
            },
            complete: () => {
              if (!this.livePlayerMap) {
                this.livePlayerMap = {}
              }
              this.userlist.map(user => {
                const uid = `${user.uid}`
                if (user.uid != this.loginUser.uid) {
                  console.log(`重新播放 ${uid}`)
                  if (!this.livePlayerMap[uid]) {
                    this.livePlayerMap[uid] = wx.createLivePlayerContext(`yunxinplayer-${user.uid}`, this)
                  }
                  console.error(this.livePlayerMap[uid])
                  this.showToast('text', '开始重连拉流')
                  this.livePlayerMap[uid].play()
                }
              })
            }
          })
        }
      },
      reconnectStreamAfter (duration = 0) {
        clearTimeout(this.reconnectStreamTimer)
        this.reconnectStreamTimer = setTimeout(() => {
          this.reconnectStream()
        }, duration)
      },
      /**
       * 格式化需要时间
       */
      _formateDuration(time) {
        let hour = parseInt(time / 3600)
        let minute = parseInt((time - hour * 3600) / 60)
        let second = time % 60
        return {
          hour: this.formatNumber(hour),
          minute: this.formatNumber(minute),
          second: this.formatNumber(second)
        }
      },
      cameraOpenErrorHandler(e) {
        console.error(e)
      },
      // 封装 showToast
      showToast(type, text, obj) {
        let param = { duration: (obj && obj.duration) || 1500, mask: (obj && obj.isMask) || false }
        switch(type) {
          case 'text': {
            param['title'] = text || ''
            param['icon'] = 'none'
            break
          }
          case 'loading': {
            param['title'] = text || ''
            param['icon'] = 'loading'
            break
          }
          case 'success': {
            param['title'] = text || ''
            param['icon'] = 'success'
            break
          }
          case 'error': {
            param['title'] = text || ''
            param['image'] = '/images/emoji.png'
            break
          }
          default: {
            break
          }
        }
        wx.showToast(param)
      },
      formatNumber(n) {
        n = n.toString()
        return n[1] ? n : '0' + n
      }
    },
    onLoad: function (options) {
      app.globalData.isPushBeCallPage = false
      console.log(options)
      wx.setKeepScreenOn({
        keepScreenOn: true
      })

      let pageTitle = ''
      if (options.beCalling) { // 被叫
        pageTitle = options.caller
        this.setData({
          pageTitle: pageTitle,
          beCalling: true,
          infoOfBeCalled: {
            caller: options.caller,
            cid: options.cid,
            type: options.type
          }
        })
      } else { // 主叫
        this.setData({
          isCalling: true,
          pageTitle: pageTitle,
          callingPosition: {
            x: 0,
            y: 0,
            width: app.globalData.videoContainerSize.width,
            height: app.globalData.videoContainerSize.height
          }
        })
        app.globalData.netcall.call({
          type: 2, // 通话类型：1音频，2视频
          callee: options.callee, // 被叫
          forceKeepCalling: false, // 持续呼叫
        })
        .then(obj => {
          console.log(obj, 'call-success')
        }, error => {
          if (error.event.code === 11001) {
            console.log(error, 'call-error 11001')
          } else {
            console.log(error, 'call-error')
          }
        })
        .catch((error) => {
          const duration = 2000
          showToast('text', `呼叫失败，请重试，${duration}ms后返回`, { duration })
          this.hangupHandlerAfter(duration)
        })
        pageTitle = options.callee
        clearTimeout(this.callTimerId)
        this.callTimerId = setTimeout(() => {
          const duration = 2000
          showToast('text', `无人接听，${duration}ms后自动返回`, { duration })
          this.hangupHandlerAfter(duration)
        }, 30 * 1000)
      }
      wx.setNavigationBarTitle({
        title: pageTitle,
      })
      this._initialPosition();
      this.listenNetcallEvent();
    },
  })
</script>

<script name="json">
  module.exports = {
    enablePullDownRefresh: false,
    usingComponents: {
      "yunxin-player": "../../components/yunxin-player.mpx",
      "yunxin-pusher": "../../components/yunxin-pusher.mpx"
    }
  }
</script>

<style lang="scss">
page {
  color: #000;
  font-size: 30rpx;
  width: 100%;
  height: 100%;
  font-family: PingFangSC-Regular;
  background-color: #F3F4F6;
}
.fullscreen {
  width: 100%;
  height: 100%;
}
.container {
  width: 100%;
  height: 100%;
}
/* 被叫 */
.becalling-wrapper {
  position: relative;
  width:100%;
  height:100%;
  background-color:#777;
  color:#fff;
  font-size:40rpx;
}
.becalling-wrapper .becalling-text {
  position: absolute;
  top:400rpx;
  left:50%;
  margin-left:-220rpx;
}
.becalling-wrapper .becalling-button-group {
  position: absolute;
  width:100%;
  box-sizing:border-box;
  bottom: 100rpx;
  padding: 0 40rpx;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.becalling-button-group .button {
  width:220rpx;
  height:80rpx;
  border-radius:10rpx;
  justify-content:center;
  display:flex;
  align-items:center;
  font-size:33rpx;
  color:#000;
}
.becalling-button-group .reject-button {
  background-color:#f00;
}
.becalling-button-group .accept-button {
  background-color:rgb(26, 155, 252);
}

.calling-coverview {
  width:100%;
  height:100rpx;
  background-color:#ccc;
  color:#fff;
  font-size:40rpx;
  text-align:center;
  line-height:100rpx;
}
/* 视频容器 */
.video-wrapper {
  width: 100%;
  height: 100%;
  padding-bottom: 100rpx;
  box-sizing: border-box;
  position: relative;
  background-color: #000;
}
.control-wrapper {
  width: 100%;
  box-sizing: border-box;
  position: absolute;
  bottom: 0;
}
.calling-voerview {
  background-color:#ccc;
  color:#fff;
  height: 160rpx;
  font-size: 40rpx;
  text-align: center;
  line-height: 160rpx;
}
.control-wrapper {
  position: fixed;
  bottom: 18px;
  left:0;
  display: flex;
  width: 100%;
  box-sizing: border-box;
  flex-direction:row;
  justify-content: space-between;
  padding: 0 42rpx;
  height: 200rpx;
}
.control-wrapper .item{
  width: 92rpx;
  height: 92rpx;
  margin-top: 100rpx;
}
.netcall-time-text {
  position:absolute;
  bottom:160rpx;
  width:100%;
  height: 40rpx;
  color:#fff;
  font-size:40rpx;
  text-align:center;
  left:0;
}

</style>
