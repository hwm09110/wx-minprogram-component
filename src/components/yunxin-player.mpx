<template>
  <!--components/yunxin-player/yunxin-player.wxml-->
  <view class="play-container" style="left:{{config.x}}px; top:{{config.y}}px; width: {{config.width}}px; height: {{config.height}}px; ">
    <live-player
      id="yunxinplayer-{{uid}}"
      src="{{url}}"
      mode="RTC"
      class="player"
      orientation="{{orientation}}"
      min-cache="0.2"
      max-cache="0.8"
      bindstatechange="stateChangeHandler"
      object-fit="{{objectFit}}"
      autoplay
      style="height: {{config.height}}px; position: absolute; width: 100%; top: 0; left: 0;background-color: transparent;"
      debug="{{debug}}">
      <slot />
      <cover-view
        wx-if="{{status !== 'ready'}}"
        class="sud flex-center-column"
        style="display:none;">
        <!-- style="position: absolute; width: 100%; height:100%;display:flex;justify-content:center;align-items:center;"> -->
        <cover-image style="width: 182rpx;height:240rpx" src="../assets/img/yunxin/{{status}}.png"></cover-image>
      </cover-view>
      <cover-view style="position: absolute;top:10px;left:10px;font-size: 28rpx; right: 10px;color:#ccc;" wx-if="{{coverText.length != 0}}">
        {{coverText}}
      </cover-view>
    </live-player>
  </view>
</template>

<script>
  import { createComponent } from '@mpxjs/core'

  createComponent({
    properties: {
      config: {
        type: Object,
        value: {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        }
      },
      debug: {
        type: Boolean,
        value: false
      },
      /**
       * 加载状态：loading、ready、error
       */
      status: {
        type: String,
        value: 'loading',
        observer: function (newVal, oldVal, changedPath) {
          console.log(`player status changed from ${oldVal} to ${newVal}`)
        }
      },
      /**
       * 画面方向，可选值有 vertical，horizontal
       */
      orientation: {
        type: String,
        value: 'vertical'
      },
      objectFit: {
        type: String,
        value: 'fillCrop'
      },
      name: {
        type: String,
        value: ''
      },
      uid: {
        type: String,
        value: ''
      },
      coverText: {
        type: String,
        value: ''
      },
      url: {
        type: String,
        value: '',
        observer: function (newVal, oldVal, changedPath) {
        }
      }
    },
    data: {
      livePlayerContext: null,
      isDetached: false
    },
    methods: {
      /**
       * 组件生命周期：在组件布局完成后执行，此时可以获取节点信息
       */
      ready() {
        console.log(`yunxinplayer-${this.uid} ready`)
        if (this.livePlayerContext) {
          this.livePlayerContext = wx.createLivePlayerContext(`yunxinplayer-${this.uid}`, this)
        }
        if (this.url) {
          this.start()
        }
      },
      /**
       * 组件生命周期：在组件实例被从页面节点树移除时执行
       */
      detached() {
        console.log(`yunxinplayer-${this.uid} isDetached`)
        wx.createLivePlayerContext(`yunxinplayer-${this.uid}`, this).stop()
        this.isDetached = true
      },

      /**
       * 开始拉流播放
       */
      start() {
        const uid = this.uid
        if (this.status === 'ready') {
          console.log(`player ${uid} already started`)
          return
        }
        if (this.isDetached) {
          console.log(`try to start player while component already isDetached`)
          return
        }
        console.log(`starting player ${uid}`)
        this.livePlayerContext.play()
      },
      /**
       * 停止拉流播放
       */
      stop() {
        console.log(`stopping player ${this.uid}`)
        wx.createLivePlayerContext(`yunxinplayer-${this.uid}`, this).stop()
      },
      /**
       * 切换画面方向
       * true为 horizontal，false为 vertical
       */
      changeOrientation(isHorizontal) {
        let orientation = isHorizontal ? 'horizontal' : 'vertical'
        this.setData({
          orientation: orientation
        })
      },
      /**
       * 切换填充模式
       * true为 fillCrop，false为 contain
       */
      changeObjectFit(isFillCrop) {
        let objectFit = isFillCrop ? 'fillCrop' : 'contain'
        this.setData({
          objectFit: objectFit
        })
      },
      /**
       * 播放器状态更新回调
       */
      stateChangeHandler(e) {
        console.warn(`yunxin-player code: ${e.detail.code} - ${e.detail.message}`)
        let uid = parseInt(e.target.id.split('-')[1])
        if (e.detail.code === 2004) {
          console.log(`live-player ${uid} started playing`)
          if (this.status === 'loading') {
            this.setData({
              status: 'ready'
            })
          }
        } else if (e.detail.code === -2301) {
          console.log(`live-player ${uid} stopped`, 'error')
          this.setData({
            status: 'error'
          })
          this.triggerEvent('pullfailed');
        }
      },
      /**
       * 改变画面蒙面
       */
      changeStatus(status) {
        switch(status) {
          case 'leave':
          case 'notConnected': {
            break
          }
          default: {
            status = this.status
          }
        }
        // console.error(status)
        this.setData({
          status
        })
      },
      /**
       * 开启调试
       */
      toggleDebug(isDebug) {
        this.setData({
          debug: isDebug
        })
      }
    }
  })
</script>

<style lang="scss">
/* components/yunxin-player/yunxin-player.wxss */
.play-container{
  background: black;
  display: block;
  position: absolute;
}

.sud{
  background-color: #1B2A38;
  opacity:0.65;
}
.player {
  z-index: 10;
}
</style>

<script type="application/json">
  {
    "component": true
  }
</script>
